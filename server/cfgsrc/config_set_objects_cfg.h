
// Copyright 2021 xresloader. All rights reserved.
// Generated by xres-code-generator, please don't edit it
//

#ifndef CONFIG_EXCEL_CONFIG_SET__CONFIG_SET_OBJECTS_CFG_H
#define CONFIG_EXCEL_CONFIG_SET__CONFIG_SET_OBJECTS_CFG_H

#pragma once

#include <stdint.h>
#include <cstddef>
#include <functional>
#include <vector>
#include <string>
#include <map>
#include <unordered_map>
#include <memory>
#include <cstring>

#include "spin_rw_lock.h"

#include <kind.pb.h>
#include <pb_header_v3.pb.h>

namespace excel {


    class config_set_objects_cfg {
    public:
        typedef const ::objects_cfg item_type;
        typedef ::objects_cfg proto_type;
        typedef std::shared_ptr<item_type> item_ptr_type;

    public:
        config_set_objects_cfg();
        ~config_set_objects_cfg();

        int on_inited();

        int load_all();

        void clear();

        const std::list<org::xresloader::pb::xresloader_data_source>& get_data_source() const;

    private:
        int load_file(const std::string& file_path);
        int load_list(const char*);
        int reload_file_lists();
        void merge_data(item_ptr_type);

    private:
        ::excel::lock::spin_rw_lock           load_file_lock_;
        std::unordered_map<std::string, bool> file_status_; // true: already loaded
        std::list<org::xresloader::pb::xresloader_data_source> datasource_;

        // ------------------------- index: id -------------------------
    public:
        typedef item_ptr_type id_value_type;
        id_value_type get_by_id(uint32_t Id);
        typedef std::map<std::tuple<uint32_t>, id_value_type> id_container_type;
        const id_container_type& get_all_of_id() const;

    private:
        id_container_type id_data_;

        // ------------------------- index: type -------------------------
    public:
        typedef std::vector<item_ptr_type> type_value_type;
        const type_value_type* get_list_by_type(uint32_t Type);
        item_ptr_type get_by_type(uint32_t Type, size_t index);
    private:
        const type_value_type* _get_list_by_type(uint32_t Type);
    public:
        typedef std::vector<type_value_type> type_container_type;
        const type_container_type& get_all_of_type() const;

    private:
        type_container_type type_data_;

    };


} // excel

#endif // CONFIG_EXCEL_CONFIG_SET__CONFIG_SET_OBJECTS_CFG_H
