// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kind_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
#include "xrescode_extensions_v3.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kind_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kind_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kind_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_kind_2eproto_metadata_getter(int index);
class ObjectLabel;
struct ObjectLabelDefaultTypeInternal;
extern ObjectLabelDefaultTypeInternal _ObjectLabel_default_instance_;
class Relation;
struct RelationDefaultTypeInternal;
extern RelationDefaultTypeInternal _Relation_default_instance_;
class objects_cfg;
struct objects_cfgDefaultTypeInternal;
extern objects_cfgDefaultTypeInternal _objects_cfg_default_instance_;
class objects_cfg_LevelExpEntry_DoNotUse;
struct objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal;
extern objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal _objects_cfg_LevelExpEntry_DoNotUse_default_instance_;
class role_upgrade_cfg;
struct role_upgrade_cfgDefaultTypeInternal;
extern role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ObjectLabel* Arena::CreateMaybeMessage<::ObjectLabel>(Arena*);
template<> ::Relation* Arena::CreateMaybeMessage<::Relation>(Arena*);
template<> ::objects_cfg* Arena::CreateMaybeMessage<::objects_cfg>(Arena*);
template<> ::objects_cfg_LevelExpEntry_DoNotUse* Arena::CreateMaybeMessage<::objects_cfg_LevelExpEntry_DoNotUse>(Arena*);
template<> ::role_upgrade_cfg* Arena::CreateMaybeMessage<::role_upgrade_cfg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum cost_type : int {
  EN_CT_UNKNOWN = 0,
  EN_CT_MONEY = 10001,
  EN_CT_DIAMOND = 10101,
  cost_type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  cost_type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool cost_type_IsValid(int value);
constexpr cost_type cost_type_MIN = EN_CT_UNKNOWN;
constexpr cost_type cost_type_MAX = EN_CT_DIAMOND;
constexpr int cost_type_ARRAYSIZE = cost_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cost_type_descriptor();
template<typename T>
inline const std::string& cost_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, cost_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function cost_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    cost_type_descriptor(), enum_t_value);
}
inline bool cost_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, cost_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<cost_type>(
    cost_type_descriptor(), name, value);
}
// ===================================================================

class role_upgrade_cfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:role_upgrade_cfg) */ {
 public:
  inline role_upgrade_cfg() : role_upgrade_cfg(nullptr) {}
  virtual ~role_upgrade_cfg();
  explicit constexpr role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  role_upgrade_cfg(const role_upgrade_cfg& from);
  role_upgrade_cfg(role_upgrade_cfg&& from) noexcept
    : role_upgrade_cfg() {
    *this = ::std::move(from);
  }

  inline role_upgrade_cfg& operator=(const role_upgrade_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline role_upgrade_cfg& operator=(role_upgrade_cfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const role_upgrade_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const role_upgrade_cfg* internal_default_instance() {
    return reinterpret_cast<const role_upgrade_cfg*>(
               &_role_upgrade_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(role_upgrade_cfg& a, role_upgrade_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(role_upgrade_cfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(role_upgrade_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline role_upgrade_cfg* New() const final {
    return CreateMaybeMessage<role_upgrade_cfg>(nullptr);
  }

  role_upgrade_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<role_upgrade_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const role_upgrade_cfg& from);
  void MergeFrom(const role_upgrade_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(role_upgrade_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "role_upgrade_cfg";
  }
  protected:
  explicit role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_kind_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLevelFieldNumber = 2,
    kCostTypeFieldNumber = 3,
    kCostValueFieldNumber = 4,
    kScoreAddFieldNumber = 5,
  };
  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  void clear_costtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype() const;
  void set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_costtype() const;
  void _internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 CostValue = 4;
  void clear_costvalue();
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue() const;
  void set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_costvalue() const;
  void _internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ScoreAdd = 5;
  void clear_scoreadd();
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd() const;
  void set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scoreadd() const;
  void _internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:role_upgrade_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 costtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 costvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 scoreadd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class ObjectLabel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ObjectLabel) */ {
 public:
  inline ObjectLabel() : ObjectLabel(nullptr) {}
  virtual ~ObjectLabel();
  explicit constexpr ObjectLabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectLabel(const ObjectLabel& from);
  ObjectLabel(ObjectLabel&& from) noexcept
    : ObjectLabel() {
    *this = ::std::move(from);
  }

  inline ObjectLabel& operator=(const ObjectLabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectLabel& operator=(ObjectLabel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectLabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectLabel* internal_default_instance() {
    return reinterpret_cast<const ObjectLabel*>(
               &_ObjectLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectLabel& a, ObjectLabel& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectLabel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectLabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectLabel* New() const final {
    return CreateMaybeMessage<ObjectLabel>(nullptr);
  }

  ObjectLabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectLabel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectLabel& from);
  void MergeFrom(const ObjectLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectLabel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ObjectLabel";
  }
  protected:
  explicit ObjectLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_kind_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kL5FieldNumber = 5,
    kL1FieldNumber = 1,
    kL2FieldNumber = 2,
    kL3FieldNumber = 3,
    kL4FieldNumber = 4,
  };
  // repeated uint32 L5 = 5;
  int l5_size() const;
  private:
  int _internal_l5_size() const;
  public:
  void clear_l5();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l5(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_l5() const;
  void _internal_add_l5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_l5();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 l5(int index) const;
  void set_l5(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_l5(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      l5() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_l5();

  // uint32 L1 = 1;
  void clear_l1();
  ::PROTOBUF_NAMESPACE_ID::uint32 l1() const;
  void set_l1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l1() const;
  void _internal_set_l1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 L2 = 2;
  void clear_l2();
  ::PROTOBUF_NAMESPACE_ID::uint32 l2() const;
  void set_l2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l2() const;
  void _internal_set_l2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 L3 = 3;
  void clear_l3();
  ::PROTOBUF_NAMESPACE_ID::uint32 l3() const;
  void set_l3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l3() const;
  void _internal_set_l3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 L4 = 4;
  void clear_l4();
  ::PROTOBUF_NAMESPACE_ID::uint32 l4() const;
  void set_l4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_l4() const;
  void _internal_set_l4(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:ObjectLabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > l5_;
  mutable std::atomic<int> _l5_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 l4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class objects_cfg_LevelExpEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<objects_cfg_LevelExpEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<objects_cfg_LevelExpEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  objects_cfg_LevelExpEntry_DoNotUse();
  explicit constexpr objects_cfg_LevelExpEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit objects_cfg_LevelExpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const objects_cfg_LevelExpEntry_DoNotUse& other);
  static const objects_cfg_LevelExpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const objects_cfg_LevelExpEntry_DoNotUse*>(&_objects_cfg_LevelExpEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kind_2eproto);
    return ::descriptor_table_kind_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class objects_cfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:objects_cfg) */ {
 public:
  inline objects_cfg() : objects_cfg(nullptr) {}
  virtual ~objects_cfg();
  explicit constexpr objects_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  objects_cfg(const objects_cfg& from);
  objects_cfg(objects_cfg&& from) noexcept
    : objects_cfg() {
    *this = ::std::move(from);
  }

  inline objects_cfg& operator=(const objects_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline objects_cfg& operator=(objects_cfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const objects_cfg& default_instance() {
    return *internal_default_instance();
  }
  enum SellCase {
    kGold = 11,
    kExp = 12,
    SELL_NOT_SET = 0,
  };

  static inline const objects_cfg* internal_default_instance() {
    return reinterpret_cast<const objects_cfg*>(
               &_objects_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(objects_cfg& a, objects_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(objects_cfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(objects_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline objects_cfg* New() const final {
    return CreateMaybeMessage<objects_cfg>(nullptr);
  }

  objects_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<objects_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const objects_cfg& from);
  void MergeFrom(const objects_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(objects_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "objects_cfg";
  }
  protected:
  explicit objects_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_kind_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAttrFieldNumber = 5,
    kLevelExpFieldNumber = 6,
    kNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kLabelsFieldNumber = 7,
    kRelationFieldNumber = 20,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kUsetimeFieldNumber = 21,
    kGoldFieldNumber = 11,
    kExpFieldNumber = 12,
  };
  // repeated uint32 Attr = 5 [(.org.xresloader.field_separator) = "*"];
  int attr_size() const;
  private:
  int _internal_attr_size() const;
  public:
  void clear_attr();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_attr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_attr() const;
  void _internal_add_attr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_attr();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 attr(int index) const;
  void set_attr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_attr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      attr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_attr();

  // map<uint32, uint32> LevelExp = 6 [(.org.xresloader.field_separator) = "|"];
  int levelexp_size() const;
  private:
  int _internal_levelexp_size() const;
  public:
  void clear_levelexp();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_levelexp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_levelexp();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
      levelexp() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_levelexp();

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Desc = 4 [(.org.xresloader.field_tags) = "server"];
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .ObjectLabel Labels = 7 [(.org.xresloader.field_separator) = "-"];
  bool has_labels() const;
  private:
  bool _internal_has_labels() const;
  public:
  void clear_labels();
  const ::ObjectLabel& labels() const;
  ::ObjectLabel* release_labels();
  ::ObjectLabel* mutable_labels();
  void set_allocated_labels(::ObjectLabel* labels);
  private:
  const ::ObjectLabel& _internal_labels() const;
  ::ObjectLabel* _internal_mutable_labels();
  public:
  void unsafe_arena_set_allocated_labels(
      ::ObjectLabel* labels);
  ::ObjectLabel* unsafe_arena_release_labels();

  // .Relation relation = 20;
  bool has_relation() const;
  private:
  bool _internal_has_relation() const;
  public:
  void clear_relation();
  const ::Relation& relation() const;
  ::Relation* release_relation();
  ::Relation* mutable_relation();
  void set_allocated_relation(::Relation* relation);
  private:
  const ::Relation& _internal_relation() const;
  ::Relation* _internal_mutable_relation();
  public:
  void unsafe_arena_set_allocated_relation(
      ::Relation* relation);
  ::Relation* unsafe_arena_release_relation();

  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 usetime = 21;
  void clear_usetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 usetime() const;
  void set_usetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usetime() const;
  void _internal_set_usetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 gold = 11;
  bool has_gold() const;
  private:
  bool _internal_has_gold() const;
  public:
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::uint32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gold() const;
  void _internal_set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 exp = 12;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  ::PROTOBUF_NAMESPACE_ID::uint32 exp() const;
  void set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_exp() const;
  void _internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_Sell();
  SellCase Sell_case() const;
  // @@protoc_insertion_point(class_scope:objects_cfg)
 private:
  class _Internal;
  void set_has_gold();
  void set_has_exp();

  inline bool has_Sell() const;
  inline void clear_has_Sell();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > attr_;
  mutable std::atomic<int> _attr_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      objects_cfg_LevelExpEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> levelexp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::ObjectLabel* labels_;
  ::Relation* relation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usetime_;
  union SellUnion {
    constexpr SellUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::uint32 gold_;
    ::PROTOBUF_NAMESPACE_ID::uint32 exp_;
  } Sell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kind_2eproto;
};
// -------------------------------------------------------------------

class Relation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Relation) */ {
 public:
  inline Relation() : Relation(nullptr) {}
  virtual ~Relation();
  explicit constexpr Relation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Relation(const Relation& from);
  Relation(Relation&& from) noexcept
    : Relation() {
    *this = ::std::move(from);
  }

  inline Relation& operator=(const Relation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Relation& operator=(Relation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Relation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Relation* internal_default_instance() {
    return reinterpret_cast<const Relation*>(
               &_Relation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Relation& a, Relation& b) {
    a.Swap(&b);
  }
  inline void Swap(Relation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Relation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Relation* New() const final {
    return CreateMaybeMessage<Relation>(nullptr);
  }

  Relation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Relation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Relation& from);
  void MergeFrom(const Relation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Relation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Relation";
  }
  protected:
  explicit Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_kind_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItem1FieldNumber = 1,
    kItem2FieldNumber = 2,
    kItem3FieldNumber = 3,
  };
  // uint32 item1 = 1;
  void clear_item1();
  ::PROTOBUF_NAMESPACE_ID::uint32 item1() const;
  void set_item1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item1() const;
  void _internal_set_item1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item2 = 2;
  void clear_item2();
  ::PROTOBUF_NAMESPACE_ID::uint32 item2() const;
  void set_item2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item2() const;
  void _internal_set_item2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 item3 = 3;
  void clear_item3();
  ::PROTOBUF_NAMESPACE_ID::uint32 item3() const;
  void set_item3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_item3() const;
  void _internal_set_item3(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Relation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 item3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kind_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// role_upgrade_cfg

// uint32 Id = 1;
inline void role_upgrade_cfg::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::id() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Id)
  return _internal_id();
}
inline void role_upgrade_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void role_upgrade_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Id)
}

// uint32 Level = 2;
inline void role_upgrade_cfg::clear_level() {
  level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::level() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.Level)
  return _internal_level();
}
inline void role_upgrade_cfg::_internal_set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  level_ = value;
}
inline void role_upgrade_cfg::set_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.Level)
}

// uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
inline void role_upgrade_cfg::clear_costtype() {
  costtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::_internal_costtype() const {
  return costtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 role_upgrade_cfg::costtype() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostType)
  return _internal_costtype();
}
inline void role_upgrade_cfg::_internal_set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  costtype_ = value;
}
inline void role_upgrade_cfg::set_costtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_costtype(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostType)
}

// int32 CostValue = 4;
inline void role_upgrade_cfg::clear_costvalue() {
  costvalue_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_costvalue() const {
  return costvalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::costvalue() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.CostValue)
  return _internal_costvalue();
}
inline void role_upgrade_cfg::_internal_set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  costvalue_ = value;
}
inline void role_upgrade_cfg::set_costvalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_costvalue(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.CostValue)
}

// int32 ScoreAdd = 5;
inline void role_upgrade_cfg::clear_scoreadd() {
  scoreadd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::_internal_scoreadd() const {
  return scoreadd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 role_upgrade_cfg::scoreadd() const {
  // @@protoc_insertion_point(field_get:role_upgrade_cfg.ScoreAdd)
  return _internal_scoreadd();
}
inline void role_upgrade_cfg::_internal_set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scoreadd_ = value;
}
inline void role_upgrade_cfg::set_scoreadd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scoreadd(value);
  // @@protoc_insertion_point(field_set:role_upgrade_cfg.ScoreAdd)
}

// -------------------------------------------------------------------

// ObjectLabel

// uint32 L1 = 1;
inline void ObjectLabel::clear_l1() {
  l1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::_internal_l1() const {
  return l1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::l1() const {
  // @@protoc_insertion_point(field_get:ObjectLabel.L1)
  return _internal_l1();
}
inline void ObjectLabel::_internal_set_l1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l1_ = value;
}
inline void ObjectLabel::set_l1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l1(value);
  // @@protoc_insertion_point(field_set:ObjectLabel.L1)
}

// uint32 L2 = 2;
inline void ObjectLabel::clear_l2() {
  l2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::_internal_l2() const {
  return l2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::l2() const {
  // @@protoc_insertion_point(field_get:ObjectLabel.L2)
  return _internal_l2();
}
inline void ObjectLabel::_internal_set_l2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l2_ = value;
}
inline void ObjectLabel::set_l2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l2(value);
  // @@protoc_insertion_point(field_set:ObjectLabel.L2)
}

// uint32 L3 = 3;
inline void ObjectLabel::clear_l3() {
  l3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::_internal_l3() const {
  return l3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::l3() const {
  // @@protoc_insertion_point(field_get:ObjectLabel.L3)
  return _internal_l3();
}
inline void ObjectLabel::_internal_set_l3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l3_ = value;
}
inline void ObjectLabel::set_l3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l3(value);
  // @@protoc_insertion_point(field_set:ObjectLabel.L3)
}

// uint32 L4 = 4;
inline void ObjectLabel::clear_l4() {
  l4_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::_internal_l4() const {
  return l4_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::l4() const {
  // @@protoc_insertion_point(field_get:ObjectLabel.L4)
  return _internal_l4();
}
inline void ObjectLabel::_internal_set_l4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  l4_ = value;
}
inline void ObjectLabel::set_l4(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_l4(value);
  // @@protoc_insertion_point(field_set:ObjectLabel.L4)
}

// repeated uint32 L5 = 5;
inline int ObjectLabel::_internal_l5_size() const {
  return l5_.size();
}
inline int ObjectLabel::l5_size() const {
  return _internal_l5_size();
}
inline void ObjectLabel::clear_l5() {
  l5_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::_internal_l5(int index) const {
  return l5_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectLabel::l5(int index) const {
  // @@protoc_insertion_point(field_get:ObjectLabel.L5)
  return _internal_l5(index);
}
inline void ObjectLabel::set_l5(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  l5_.Set(index, value);
  // @@protoc_insertion_point(field_set:ObjectLabel.L5)
}
inline void ObjectLabel::_internal_add_l5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  l5_.Add(value);
}
inline void ObjectLabel::add_l5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_l5(value);
  // @@protoc_insertion_point(field_add:ObjectLabel.L5)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ObjectLabel::_internal_l5() const {
  return l5_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ObjectLabel::l5() const {
  // @@protoc_insertion_point(field_list:ObjectLabel.L5)
  return _internal_l5();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ObjectLabel::_internal_mutable_l5() {
  return &l5_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ObjectLabel::mutable_l5() {
  // @@protoc_insertion_point(field_mutable_list:ObjectLabel.L5)
  return _internal_mutable_l5();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// objects_cfg

// uint32 Id = 1;
inline void objects_cfg::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::id() const {
  // @@protoc_insertion_point(field_get:objects_cfg.Id)
  return _internal_id();
}
inline void objects_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void objects_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:objects_cfg.Id)
}

// uint32 Type = 2;
inline void objects_cfg::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::type() const {
  // @@protoc_insertion_point(field_get:objects_cfg.Type)
  return _internal_type();
}
inline void objects_cfg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void objects_cfg::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:objects_cfg.Type)
}

// string Name = 3;
inline void objects_cfg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& objects_cfg::name() const {
  // @@protoc_insertion_point(field_get:objects_cfg.Name)
  return _internal_name();
}
inline void objects_cfg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:objects_cfg.Name)
}
inline std::string* objects_cfg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:objects_cfg.Name)
  return _internal_mutable_name();
}
inline const std::string& objects_cfg::_internal_name() const {
  return name_.Get();
}
inline void objects_cfg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void objects_cfg::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:objects_cfg.Name)
}
inline void objects_cfg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:objects_cfg.Name)
}
inline void objects_cfg::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:objects_cfg.Name)
}
inline std::string* objects_cfg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* objects_cfg::release_name() {
  // @@protoc_insertion_point(field_release:objects_cfg.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void objects_cfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:objects_cfg.Name)
}

// string Desc = 4 [(.org.xresloader.field_tags) = "server"];
inline void objects_cfg::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& objects_cfg::desc() const {
  // @@protoc_insertion_point(field_get:objects_cfg.Desc)
  return _internal_desc();
}
inline void objects_cfg::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:objects_cfg.Desc)
}
inline std::string* objects_cfg::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:objects_cfg.Desc)
  return _internal_mutable_desc();
}
inline const std::string& objects_cfg::_internal_desc() const {
  return desc_.Get();
}
inline void objects_cfg::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void objects_cfg::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:objects_cfg.Desc)
}
inline void objects_cfg::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:objects_cfg.Desc)
}
inline void objects_cfg::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:objects_cfg.Desc)
}
inline std::string* objects_cfg::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* objects_cfg::release_desc() {
  // @@protoc_insertion_point(field_release:objects_cfg.Desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void objects_cfg::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:objects_cfg.Desc)
}

// repeated uint32 Attr = 5 [(.org.xresloader.field_separator) = "*"];
inline int objects_cfg::_internal_attr_size() const {
  return attr_.size();
}
inline int objects_cfg::attr_size() const {
  return _internal_attr_size();
}
inline void objects_cfg::clear_attr() {
  attr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_attr(int index) const {
  return attr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::attr(int index) const {
  // @@protoc_insertion_point(field_get:objects_cfg.Attr)
  return _internal_attr(index);
}
inline void objects_cfg::set_attr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attr_.Set(index, value);
  // @@protoc_insertion_point(field_set:objects_cfg.Attr)
}
inline void objects_cfg::_internal_add_attr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  attr_.Add(value);
}
inline void objects_cfg::add_attr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_attr(value);
  // @@protoc_insertion_point(field_add:objects_cfg.Attr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
objects_cfg::_internal_attr() const {
  return attr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
objects_cfg::attr() const {
  // @@protoc_insertion_point(field_list:objects_cfg.Attr)
  return _internal_attr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
objects_cfg::_internal_mutable_attr() {
  return &attr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
objects_cfg::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:objects_cfg.Attr)
  return _internal_mutable_attr();
}

// map<uint32, uint32> LevelExp = 6 [(.org.xresloader.field_separator) = "|"];
inline int objects_cfg::_internal_levelexp_size() const {
  return levelexp_.size();
}
inline int objects_cfg::levelexp_size() const {
  return _internal_levelexp_size();
}
inline void objects_cfg::clear_levelexp() {
  levelexp_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
objects_cfg::_internal_levelexp() const {
  return levelexp_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >&
objects_cfg::levelexp() const {
  // @@protoc_insertion_point(field_map:objects_cfg.LevelExp)
  return _internal_levelexp();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
objects_cfg::_internal_mutable_levelexp() {
  return levelexp_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >*
objects_cfg::mutable_levelexp() {
  // @@protoc_insertion_point(field_mutable_map:objects_cfg.LevelExp)
  return _internal_mutable_levelexp();
}

// .ObjectLabel Labels = 7 [(.org.xresloader.field_separator) = "-"];
inline bool objects_cfg::_internal_has_labels() const {
  return this != internal_default_instance() && labels_ != nullptr;
}
inline bool objects_cfg::has_labels() const {
  return _internal_has_labels();
}
inline void objects_cfg::clear_labels() {
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
}
inline const ::ObjectLabel& objects_cfg::_internal_labels() const {
  const ::ObjectLabel* p = labels_;
  return p != nullptr ? *p : reinterpret_cast<const ::ObjectLabel&>(
      ::_ObjectLabel_default_instance_);
}
inline const ::ObjectLabel& objects_cfg::labels() const {
  // @@protoc_insertion_point(field_get:objects_cfg.Labels)
  return _internal_labels();
}
inline void objects_cfg::unsafe_arena_set_allocated_labels(
    ::ObjectLabel* labels) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(labels_);
  }
  labels_ = labels;
  if (labels) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:objects_cfg.Labels)
}
inline ::ObjectLabel* objects_cfg::release_labels() {
  
  ::ObjectLabel* temp = labels_;
  labels_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ObjectLabel* objects_cfg::unsafe_arena_release_labels() {
  // @@protoc_insertion_point(field_release:objects_cfg.Labels)
  
  ::ObjectLabel* temp = labels_;
  labels_ = nullptr;
  return temp;
}
inline ::ObjectLabel* objects_cfg::_internal_mutable_labels() {
  
  if (labels_ == nullptr) {
    auto* p = CreateMaybeMessage<::ObjectLabel>(GetArena());
    labels_ = p;
  }
  return labels_;
}
inline ::ObjectLabel* objects_cfg::mutable_labels() {
  // @@protoc_insertion_point(field_mutable:objects_cfg.Labels)
  return _internal_mutable_labels();
}
inline void objects_cfg::set_allocated_labels(::ObjectLabel* labels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete labels_;
  }
  if (labels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(labels);
    if (message_arena != submessage_arena) {
      labels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labels, submessage_arena);
    }
    
  } else {
    
  }
  labels_ = labels;
  // @@protoc_insertion_point(field_set_allocated:objects_cfg.Labels)
}

// uint32 gold = 11;
inline bool objects_cfg::_internal_has_gold() const {
  return Sell_case() == kGold;
}
inline bool objects_cfg::has_gold() const {
  return _internal_has_gold();
}
inline void objects_cfg::set_has_gold() {
  _oneof_case_[0] = kGold;
}
inline void objects_cfg::clear_gold() {
  if (_internal_has_gold()) {
    Sell_.gold_ = 0u;
    clear_has_Sell();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_gold() const {
  if (_internal_has_gold()) {
    return Sell_.gold_;
  }
  return 0u;
}
inline void objects_cfg::_internal_set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_gold()) {
    clear_Sell();
    set_has_gold();
  }
  Sell_.gold_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::gold() const {
  // @@protoc_insertion_point(field_get:objects_cfg.gold)
  return _internal_gold();
}
inline void objects_cfg::set_gold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gold(value);
  // @@protoc_insertion_point(field_set:objects_cfg.gold)
}

// uint32 exp = 12;
inline bool objects_cfg::_internal_has_exp() const {
  return Sell_case() == kExp;
}
inline bool objects_cfg::has_exp() const {
  return _internal_has_exp();
}
inline void objects_cfg::set_has_exp() {
  _oneof_case_[0] = kExp;
}
inline void objects_cfg::clear_exp() {
  if (_internal_has_exp()) {
    Sell_.exp_ = 0u;
    clear_has_Sell();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_exp() const {
  if (_internal_has_exp()) {
    return Sell_.exp_;
  }
  return 0u;
}
inline void objects_cfg::_internal_set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_exp()) {
    clear_Sell();
    set_has_exp();
  }
  Sell_.exp_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::exp() const {
  // @@protoc_insertion_point(field_get:objects_cfg.exp)
  return _internal_exp();
}
inline void objects_cfg::set_exp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:objects_cfg.exp)
}

// .Relation relation = 20;
inline bool objects_cfg::_internal_has_relation() const {
  return this != internal_default_instance() && relation_ != nullptr;
}
inline bool objects_cfg::has_relation() const {
  return _internal_has_relation();
}
inline void objects_cfg::clear_relation() {
  if (GetArena() == nullptr && relation_ != nullptr) {
    delete relation_;
  }
  relation_ = nullptr;
}
inline const ::Relation& objects_cfg::_internal_relation() const {
  const ::Relation* p = relation_;
  return p != nullptr ? *p : reinterpret_cast<const ::Relation&>(
      ::_Relation_default_instance_);
}
inline const ::Relation& objects_cfg::relation() const {
  // @@protoc_insertion_point(field_get:objects_cfg.relation)
  return _internal_relation();
}
inline void objects_cfg::unsafe_arena_set_allocated_relation(
    ::Relation* relation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(relation_);
  }
  relation_ = relation;
  if (relation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:objects_cfg.relation)
}
inline ::Relation* objects_cfg::release_relation() {
  
  ::Relation* temp = relation_;
  relation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Relation* objects_cfg::unsafe_arena_release_relation() {
  // @@protoc_insertion_point(field_release:objects_cfg.relation)
  
  ::Relation* temp = relation_;
  relation_ = nullptr;
  return temp;
}
inline ::Relation* objects_cfg::_internal_mutable_relation() {
  
  if (relation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Relation>(GetArena());
    relation_ = p;
  }
  return relation_;
}
inline ::Relation* objects_cfg::mutable_relation() {
  // @@protoc_insertion_point(field_mutable:objects_cfg.relation)
  return _internal_mutable_relation();
}
inline void objects_cfg::set_allocated_relation(::Relation* relation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete relation_;
  }
  if (relation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(relation);
    if (message_arena != submessage_arena) {
      relation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relation, submessage_arena);
    }
    
  } else {
    
  }
  relation_ = relation;
  // @@protoc_insertion_point(field_set_allocated:objects_cfg.relation)
}

// uint32 usetime = 21;
inline void objects_cfg::clear_usetime() {
  usetime_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::_internal_usetime() const {
  return usetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 objects_cfg::usetime() const {
  // @@protoc_insertion_point(field_get:objects_cfg.usetime)
  return _internal_usetime();
}
inline void objects_cfg::_internal_set_usetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  usetime_ = value;
}
inline void objects_cfg::set_usetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usetime(value);
  // @@protoc_insertion_point(field_set:objects_cfg.usetime)
}

inline bool objects_cfg::has_Sell() const {
  return Sell_case() != SELL_NOT_SET;
}
inline void objects_cfg::clear_has_Sell() {
  _oneof_case_[0] = SELL_NOT_SET;
}
inline objects_cfg::SellCase objects_cfg::Sell_case() const {
  return objects_cfg::SellCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Relation

// uint32 item1 = 1;
inline void Relation::clear_item1() {
  item1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::_internal_item1() const {
  return item1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::item1() const {
  // @@protoc_insertion_point(field_get:Relation.item1)
  return _internal_item1();
}
inline void Relation::_internal_set_item1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item1_ = value;
}
inline void Relation::set_item1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item1(value);
  // @@protoc_insertion_point(field_set:Relation.item1)
}

// uint32 item2 = 2;
inline void Relation::clear_item2() {
  item2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::_internal_item2() const {
  return item2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::item2() const {
  // @@protoc_insertion_point(field_get:Relation.item2)
  return _internal_item2();
}
inline void Relation::_internal_set_item2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item2_ = value;
}
inline void Relation::set_item2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item2(value);
  // @@protoc_insertion_point(field_set:Relation.item2)
}

// uint32 item3 = 3;
inline void Relation::clear_item3() {
  item3_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::_internal_item3() const {
  return item3_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Relation::item3() const {
  // @@protoc_insertion_point(field_get:Relation.item3)
  return _internal_item3();
}
inline void Relation::_internal_set_item3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  item3_ = value;
}
inline void Relation::set_item3(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_item3(value);
  // @@protoc_insertion_point(field_set:Relation.item3)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::cost_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cost_type>() {
  return ::cost_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kind_2eproto
