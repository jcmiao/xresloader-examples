// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kind.proto

#include "kind.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr role_upgrade_cfg::role_upgrade_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(0u)
  , level_(0u)
  , costtype_(0u)
  , costvalue_(0)
  , scoreadd_(0){}
struct role_upgrade_cfgDefaultTypeInternal {
  constexpr role_upgrade_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~role_upgrade_cfgDefaultTypeInternal() {}
  union {
    role_upgrade_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT role_upgrade_cfgDefaultTypeInternal _role_upgrade_cfg_default_instance_;
constexpr ObjectLabel::ObjectLabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : l5_()
  , _l5_cached_byte_size_()
  , l1_(0u)
  , l2_(0u)
  , l3_(0u)
  , l4_(0u){}
struct ObjectLabelDefaultTypeInternal {
  constexpr ObjectLabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectLabelDefaultTypeInternal() {}
  union {
    ObjectLabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectLabelDefaultTypeInternal _ObjectLabel_default_instance_;
constexpr objects_cfg_LevelExpEntry_DoNotUse::objects_cfg_LevelExpEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal {
  constexpr objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal() {}
  union {
    objects_cfg_LevelExpEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT objects_cfg_LevelExpEntry_DoNotUseDefaultTypeInternal _objects_cfg_LevelExpEntry_DoNotUse_default_instance_;
constexpr objects_cfg::objects_cfg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attr_()
  , _attr_cached_byte_size_()
  , levelexp_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , labels_(nullptr)
  , relation_(nullptr)
  , id_(0u)
  , type_(0u)
  , usetime_(0u)
  , _oneof_case_{}{}
struct objects_cfgDefaultTypeInternal {
  constexpr objects_cfgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~objects_cfgDefaultTypeInternal() {}
  union {
    objects_cfg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT objects_cfgDefaultTypeInternal _objects_cfg_default_instance_;
constexpr Relation::Relation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item1_(0u)
  , item2_(0u)
  , item3_(0u){}
struct RelationDefaultTypeInternal {
  constexpr RelationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RelationDefaultTypeInternal() {}
  union {
    Relation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RelationDefaultTypeInternal _Relation_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kind_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kind_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kind_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kind_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, id_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, level_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, costtype_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, costvalue_),
  PROTOBUF_FIELD_OFFSET(::role_upgrade_cfg, scoreadd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, l1_),
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, l2_),
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, l3_),
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, l4_),
  PROTOBUF_FIELD_OFFSET(::ObjectLabel, l5_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg_LevelExpEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg_LevelExpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::objects_cfg_LevelExpEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg_LevelExpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::objects_cfg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::objects_cfg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::objects_cfg, id_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, type_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, name_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, desc_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, attr_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, levelexp_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, labels_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::objects_cfg, relation_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, usetime_),
  PROTOBUF_FIELD_OFFSET(::objects_cfg, Sell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Relation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Relation, item1_),
  PROTOBUF_FIELD_OFFSET(::Relation, item2_),
  PROTOBUF_FIELD_OFFSET(::Relation, item3_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::role_upgrade_cfg)},
  { 10, -1, sizeof(::ObjectLabel)},
  { 20, 27, sizeof(::objects_cfg_LevelExpEntry_DoNotUse)},
  { 29, -1, sizeof(::objects_cfg)},
  { 46, -1, sizeof(::Relation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_role_upgrade_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ObjectLabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_objects_cfg_LevelExpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_objects_cfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Relation_default_instance_),
};

const char descriptor_table_protodef_kind_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nkind.proto\032\020xresloader.proto\032\034xrescode"
  "_extensions_v3.proto\"\342\001\n\020role_upgrade_cf"
  "g\022\n\n\002Id\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\0223\n\010CostType"
  "\030\003 \001(\rB!\312>\tcost_type\232\?\022Refer to cost_typ"
  "e\022\021\n\tCostValue\030\004 \001(\005\022\020\n\010ScoreAdd\030\005 \001(\005:Y"
  "\272TV\262\006*../config/sample-data/role_upgrade"
  "_cfg.bin\312\014\006\022\002Id\030\001\312\014\013\022\002Id\022\005Level\352\022\006client"
  "\352\022\006server\"I\n\013ObjectLabel\022\n\n\002L1\030\001 \001(\r\022\n\n\002"
  "L2\030\002 \001(\r\022\n\n\002L3\030\003 \001(\r\022\n\n\002L4\030\004 \001(\r\022\n\n\002L5\030\005"
  " \003(\r\"\221\003\n\013objects_cfg\022\n\n\002Id\030\001 \001(\r\022\014\n\004Type"
  "\030\002 \001(\r\022\014\n\004Name\030\003 \001(\t\022\027\n\004Desc\030\004 \001(\tB\t\302\?\006s"
  "erver\022\022\n\004Attr\030\005 \003(\rB\004\262\?\001*\0222\n\010LevelExp\030\006 "
  "\003(\0132\032.objects_cfg.LevelExpEntryB\004\262\?\001|\022\"\n"
  "\006Labels\030\007 \001(\0132\014.ObjectLabelB\004\262\?\001-\022\016\n\004gol"
  "d\030\013 \001(\rH\000\022\r\n\003exp\030\014 \001(\rH\000\022\033\n\010relation\030\024 \001"
  "(\0132\t.Relation\022\017\n\007usetime\030\025 \001(\r\032/\n\rLevelE"
  "xpEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\r:\0028\001:"
  "O\272TL\262\006%../config/sample-data/objects_cfg"
  ".bin\312\014\004\022\002Id\312\014\010\022\004Type\030\003\352\022\006client\352\022\006server"
  "B\006\n\004Sell\"7\n\010Relation\022\r\n\005item1\030\001 \001(\r\022\r\n\005i"
  "tem2\030\002 \001(\r\022\r\n\005item3\030\003 \001(\r*Z\n\tcost_type\022\021"
  "\n\rEN_CT_UNKNOWN\020\000\022\033\n\013EN_CT_MONEY\020\221N\032\t\322>\006"
  "\351\207\221\345\270\201\022\035\n\rEN_CT_DIAMOND\020\365N\032\t\322>\006\351\222\273\347\237\263B\003\370"
  "\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kind_2eproto_deps[2] = {
  &::descriptor_table_xrescode_5fextensions_5fv3_2eproto,
  &::descriptor_table_xresloader_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kind_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kind_2eproto = {
  false, false, 930, descriptor_table_protodef_kind_2eproto, "kind.proto", 
  &descriptor_table_kind_2eproto_once, descriptor_table_kind_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_kind_2eproto::offsets,
  file_level_metadata_kind_2eproto, file_level_enum_descriptors_kind_2eproto, file_level_service_descriptors_kind_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_kind_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return descriptor_table_kind_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kind_2eproto(&descriptor_table_kind_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* cost_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kind_2eproto);
  return file_level_enum_descriptors_kind_2eproto[0];
}
bool cost_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 10001:
    case 10101:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class role_upgrade_cfg::_Internal {
 public:
};

role_upgrade_cfg::role_upgrade_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:role_upgrade_cfg)
}
role_upgrade_cfg::role_upgrade_cfg(const role_upgrade_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scoreadd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(scoreadd_));
  // @@protoc_insertion_point(copy_constructor:role_upgrade_cfg)
}

void role_upgrade_cfg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scoreadd_) -
    reinterpret_cast<char*>(&id_)) + sizeof(scoreadd_));
}

role_upgrade_cfg::~role_upgrade_cfg() {
  // @@protoc_insertion_point(destructor:role_upgrade_cfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void role_upgrade_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void role_upgrade_cfg::ArenaDtor(void* object) {
  role_upgrade_cfg* _this = reinterpret_cast< role_upgrade_cfg* >(object);
  (void)_this;
}
void role_upgrade_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void role_upgrade_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void role_upgrade_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:role_upgrade_cfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scoreadd_) -
      reinterpret_cast<char*>(&id_)) + sizeof(scoreadd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* role_upgrade_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          costtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 CostValue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          costvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ScoreAdd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          scoreadd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* role_upgrade_cfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:role_upgrade_cfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Level = 2;
  if (this->level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->costtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_costtype(), target);
  }

  // int32 CostValue = 4;
  if (this->costvalue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_costvalue(), target);
  }

  // int32 ScoreAdd = 5;
  if (this->scoreadd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_scoreadd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:role_upgrade_cfg)
  return target;
}

size_t role_upgrade_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:role_upgrade_cfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Level = 2;
  if (this->level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_level());
  }

  // uint32 CostType = 3 [(.org.xresloader.verifier) = "cost_type", (.org.xresloader.field_description) = "Refer to cost_type"];
  if (this->costtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_costtype());
  }

  // int32 CostValue = 4;
  if (this->costvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_costvalue());
  }

  // int32 ScoreAdd = 5;
  if (this->scoreadd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scoreadd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void role_upgrade_cfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:role_upgrade_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  const role_upgrade_cfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<role_upgrade_cfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:role_upgrade_cfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:role_upgrade_cfg)
    MergeFrom(*source);
  }
}

void role_upgrade_cfg::MergeFrom(const role_upgrade_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:role_upgrade_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.level() != 0) {
    _internal_set_level(from._internal_level());
  }
  if (from.costtype() != 0) {
    _internal_set_costtype(from._internal_costtype());
  }
  if (from.costvalue() != 0) {
    _internal_set_costvalue(from._internal_costvalue());
  }
  if (from.scoreadd() != 0) {
    _internal_set_scoreadd(from._internal_scoreadd());
  }
}

void role_upgrade_cfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:role_upgrade_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_upgrade_cfg::CopyFrom(const role_upgrade_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:role_upgrade_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_upgrade_cfg::IsInitialized() const {
  return true;
}

void role_upgrade_cfg::InternalSwap(role_upgrade_cfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, scoreadd_)
      + sizeof(role_upgrade_cfg::scoreadd_)
      - PROTOBUF_FIELD_OFFSET(role_upgrade_cfg, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata role_upgrade_cfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ObjectLabel::_Internal {
 public:
};

ObjectLabel::ObjectLabel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  l5_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ObjectLabel)
}
ObjectLabel::ObjectLabel(const ObjectLabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      l5_(from.l5_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&l1_, &from.l1_,
    static_cast<size_t>(reinterpret_cast<char*>(&l4_) -
    reinterpret_cast<char*>(&l1_)) + sizeof(l4_));
  // @@protoc_insertion_point(copy_constructor:ObjectLabel)
}

void ObjectLabel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&l1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&l4_) -
    reinterpret_cast<char*>(&l1_)) + sizeof(l4_));
}

ObjectLabel::~ObjectLabel() {
  // @@protoc_insertion_point(destructor:ObjectLabel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectLabel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ObjectLabel::ArenaDtor(void* object) {
  ObjectLabel* _this = reinterpret_cast< ObjectLabel* >(object);
  (void)_this;
}
void ObjectLabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectLabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectLabel::Clear() {
// @@protoc_insertion_point(message_clear_start:ObjectLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  l5_.Clear();
  ::memset(&l1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&l4_) -
      reinterpret_cast<char*>(&l1_)) + sizeof(l4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectLabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 L1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          l1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 L2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          l2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 L3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          l3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 L4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          l4_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 L5 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_l5(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_l5(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectLabel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ObjectLabel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 L1 = 1;
  if (this->l1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_l1(), target);
  }

  // uint32 L2 = 2;
  if (this->l2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_l2(), target);
  }

  // uint32 L3 = 3;
  if (this->l3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_l3(), target);
  }

  // uint32 L4 = 4;
  if (this->l4() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_l4(), target);
  }

  // repeated uint32 L5 = 5;
  {
    int byte_size = _l5_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_l5(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ObjectLabel)
  return target;
}

size_t ObjectLabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ObjectLabel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 L5 = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->l5_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _l5_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 L1 = 1;
  if (this->l1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l1());
  }

  // uint32 L2 = 2;
  if (this->l2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l2());
  }

  // uint32 L3 = 3;
  if (this->l3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l3());
  }

  // uint32 L4 = 4;
  if (this->l4() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_l4());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectLabel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ObjectLabel)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectLabel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectLabel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ObjectLabel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ObjectLabel)
    MergeFrom(*source);
  }
}

void ObjectLabel::MergeFrom(const ObjectLabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ObjectLabel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  l5_.MergeFrom(from.l5_);
  if (from.l1() != 0) {
    _internal_set_l1(from._internal_l1());
  }
  if (from.l2() != 0) {
    _internal_set_l2(from._internal_l2());
  }
  if (from.l3() != 0) {
    _internal_set_l3(from._internal_l3());
  }
  if (from.l4() != 0) {
    _internal_set_l4(from._internal_l4());
  }
}

void ObjectLabel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ObjectLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectLabel::CopyFrom(const ObjectLabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ObjectLabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectLabel::IsInitialized() const {
  return true;
}

void ObjectLabel::InternalSwap(ObjectLabel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  l5_.InternalSwap(&other->l5_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectLabel, l4_)
      + sizeof(ObjectLabel::l4_)
      - PROTOBUF_FIELD_OFFSET(ObjectLabel, l1_)>(
          reinterpret_cast<char*>(&l1_),
          reinterpret_cast<char*>(&other->l1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectLabel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

objects_cfg_LevelExpEntry_DoNotUse::objects_cfg_LevelExpEntry_DoNotUse() {}
objects_cfg_LevelExpEntry_DoNotUse::objects_cfg_LevelExpEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void objects_cfg_LevelExpEntry_DoNotUse::MergeFrom(const objects_cfg_LevelExpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata objects_cfg_LevelExpEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void objects_cfg_LevelExpEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class objects_cfg::_Internal {
 public:
  static const ::ObjectLabel& labels(const objects_cfg* msg);
  static const ::Relation& relation(const objects_cfg* msg);
};

const ::ObjectLabel&
objects_cfg::_Internal::labels(const objects_cfg* msg) {
  return *msg->labels_;
}
const ::Relation&
objects_cfg::_Internal::relation(const objects_cfg* msg) {
  return *msg->relation_;
}
objects_cfg::objects_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  attr_(arena),
  levelexp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:objects_cfg)
}
objects_cfg::objects_cfg(const objects_cfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      attr_(from.attr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  levelexp_.MergeFrom(from.levelexp_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_desc().empty()) {
    desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_desc(), 
      GetArena());
  }
  if (from._internal_has_labels()) {
    labels_ = new ::ObjectLabel(*from.labels_);
  } else {
    labels_ = nullptr;
  }
  if (from._internal_has_relation()) {
    relation_ = new ::Relation(*from.relation_);
  } else {
    relation_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&usetime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(usetime_));
  clear_has_Sell();
  switch (from.Sell_case()) {
    case kGold: {
      _internal_set_gold(from._internal_gold());
      break;
    }
    case kExp: {
      _internal_set_exp(from._internal_exp());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:objects_cfg)
}

void objects_cfg::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&labels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usetime_) -
    reinterpret_cast<char*>(&labels_)) + sizeof(usetime_));
clear_has_Sell();
}

objects_cfg::~objects_cfg() {
  // @@protoc_insertion_point(destructor:objects_cfg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void objects_cfg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete labels_;
  if (this != internal_default_instance()) delete relation_;
  if (has_Sell()) {
    clear_Sell();
  }
}

void objects_cfg::ArenaDtor(void* object) {
  objects_cfg* _this = reinterpret_cast< objects_cfg* >(object);
  (void)_this;
}
void objects_cfg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void objects_cfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void objects_cfg::clear_Sell() {
// @@protoc_insertion_point(one_of_clear_start:objects_cfg)
  switch (Sell_case()) {
    case kGold: {
      // No need to clear
      break;
    }
    case kExp: {
      // No need to clear
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SELL_NOT_SET;
}


void objects_cfg::Clear() {
// @@protoc_insertion_point(message_clear_start:objects_cfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_.Clear();
  levelexp_.Clear();
  name_.ClearToEmpty();
  desc_.ClearToEmpty();
  if (GetArena() == nullptr && labels_ != nullptr) {
    delete labels_;
  }
  labels_ = nullptr;
  if (GetArena() == nullptr && relation_ != nullptr) {
    delete relation_;
  }
  relation_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&usetime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(usetime_));
  clear_Sell();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* objects_cfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 Type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "objects_cfg.Name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Desc = 4 [(.org.xresloader.field_tags) = "server"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "objects_cfg.Desc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 Attr = 5 [(.org.xresloader.field_separator) = "*"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_attr(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_attr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, uint32> LevelExp = 6 [(.org.xresloader.field_separator) = "|"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&levelexp_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .ObjectLabel Labels = 7 [(.org.xresloader.field_separator) = "-"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_labels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 gold = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _internal_set_gold(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 exp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_exp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Relation relation = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_relation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 usetime = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          usetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* objects_cfg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:objects_cfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 Type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "objects_cfg.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string Desc = 4 [(.org.xresloader.field_tags) = "server"];
  if (this->desc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_desc().data(), static_cast<int>(this->_internal_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "objects_cfg.Desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_desc(), target);
  }

  // repeated uint32 Attr = 5 [(.org.xresloader.field_separator) = "*"];
  {
    int byte_size = _attr_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          5, _internal_attr(), byte_size, target);
    }
  }

  // map<uint32, uint32> LevelExp = 6 [(.org.xresloader.field_separator) = "|"];
  if (!this->_internal_levelexp().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_levelexp().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_levelexp().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_levelexp().begin();
          it != this->_internal_levelexp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = objects_cfg_LevelExpEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
          it = this->_internal_levelexp().begin();
          it != this->_internal_levelexp().end(); ++it) {
        target = objects_cfg_LevelExpEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  // .ObjectLabel Labels = 7 [(.org.xresloader.field_separator) = "-"];
  if (this->has_labels()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::labels(this), target, stream);
  }

  // uint32 gold = 11;
  if (_internal_has_gold()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_gold(), target);
  }

  // uint32 exp = 12;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_exp(), target);
  }

  // .Relation relation = 20;
  if (this->has_relation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::relation(this), target, stream);
  }

  // uint32 usetime = 21;
  if (this->usetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_usetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:objects_cfg)
  return target;
}

size_t objects_cfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:objects_cfg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 Attr = 5 [(.org.xresloader.field_separator) = "*"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->attr_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _attr_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint32> LevelExp = 6 [(.org.xresloader.field_separator) = "|"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_levelexp_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::uint32 >::const_iterator
      it = this->_internal_levelexp().begin();
      it != this->_internal_levelexp().end(); ++it) {
    total_size += objects_cfg_LevelExpEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string Name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Desc = 4 [(.org.xresloader.field_tags) = "server"];
  if (this->desc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_desc());
  }

  // .ObjectLabel Labels = 7 [(.org.xresloader.field_separator) = "-"];
  if (this->has_labels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *labels_);
  }

  // .Relation relation = 20;
  if (this->has_relation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relation_);
  }

  // uint32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // uint32 Type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_type());
  }

  // uint32 usetime = 21;
  if (this->usetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_usetime());
  }

  switch (Sell_case()) {
    // uint32 gold = 11;
    case kGold: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gold());
      break;
    }
    // uint32 exp = 12;
    case kExp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_exp());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void objects_cfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:objects_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  const objects_cfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<objects_cfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:objects_cfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:objects_cfg)
    MergeFrom(*source);
  }
}

void objects_cfg::MergeFrom(const objects_cfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:objects_cfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attr_.MergeFrom(from.attr_);
  levelexp_.MergeFrom(from.levelexp_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.desc().size() > 0) {
    _internal_set_desc(from._internal_desc());
  }
  if (from.has_labels()) {
    _internal_mutable_labels()->::ObjectLabel::MergeFrom(from._internal_labels());
  }
  if (from.has_relation()) {
    _internal_mutable_relation()->::Relation::MergeFrom(from._internal_relation());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.usetime() != 0) {
    _internal_set_usetime(from._internal_usetime());
  }
  switch (from.Sell_case()) {
    case kGold: {
      _internal_set_gold(from._internal_gold());
      break;
    }
    case kExp: {
      _internal_set_exp(from._internal_exp());
      break;
    }
    case SELL_NOT_SET: {
      break;
    }
  }
}

void objects_cfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:objects_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void objects_cfg::CopyFrom(const objects_cfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:objects_cfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool objects_cfg::IsInitialized() const {
  return true;
}

void objects_cfg::InternalSwap(objects_cfg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  attr_.InternalSwap(&other->attr_);
  levelexp_.Swap(&other->levelexp_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  desc_.Swap(&other->desc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(objects_cfg, usetime_)
      + sizeof(objects_cfg::usetime_)
      - PROTOBUF_FIELD_OFFSET(objects_cfg, labels_)>(
          reinterpret_cast<char*>(&labels_),
          reinterpret_cast<char*>(&other->labels_));
  swap(Sell_, other->Sell_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata objects_cfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Relation::_Internal {
 public:
};

Relation::Relation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Relation)
}
Relation::Relation(const Relation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&item1_, &from.item1_,
    static_cast<size_t>(reinterpret_cast<char*>(&item3_) -
    reinterpret_cast<char*>(&item1_)) + sizeof(item3_));
  // @@protoc_insertion_point(copy_constructor:Relation)
}

void Relation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&item3_) -
    reinterpret_cast<char*>(&item1_)) + sizeof(item3_));
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:Relation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Relation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Relation::ArenaDtor(void* object) {
  Relation* _this = reinterpret_cast< Relation* >(object);
  (void)_this;
}
void Relation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Relation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&item1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item3_) -
      reinterpret_cast<char*>(&item1_)) + sizeof(item3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Relation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 item1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          item1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          item2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 item3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          item3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Relation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Relation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 item1 = 1;
  if (this->item1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_item1(), target);
  }

  // uint32 item2 = 2;
  if (this->item2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item2(), target);
  }

  // uint32 item3 = 3;
  if (this->item3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_item3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Relation)
  return target;
}

size_t Relation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Relation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 item1 = 1;
  if (this->item1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item1());
  }

  // uint32 item2 = 2;
  if (this->item2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item2());
  }

  // uint32 item3 = 3;
  if (this->item3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_item3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Relation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Relation)
  GOOGLE_DCHECK_NE(&from, this);
  const Relation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Relation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Relation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Relation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.item1() != 0) {
    _internal_set_item1(from._internal_item1());
  }
  if (from.item2() != 0) {
    _internal_set_item2(from._internal_item2());
  }
  if (from.item3() != 0) {
    _internal_set_item3(from._internal_item3());
  }
}

void Relation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {
  return true;
}

void Relation::InternalSwap(Relation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Relation, item3_)
      + sizeof(Relation::item3_)
      - PROTOBUF_FIELD_OFFSET(Relation, item1_)>(
          reinterpret_cast<char*>(&item1_),
          reinterpret_cast<char*>(&other->item1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Relation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::role_upgrade_cfg* Arena::CreateMaybeMessage< ::role_upgrade_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::role_upgrade_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::ObjectLabel* Arena::CreateMaybeMessage< ::ObjectLabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ObjectLabel >(arena);
}
template<> PROTOBUF_NOINLINE ::objects_cfg_LevelExpEntry_DoNotUse* Arena::CreateMaybeMessage< ::objects_cfg_LevelExpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::objects_cfg_LevelExpEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::objects_cfg* Arena::CreateMaybeMessage< ::objects_cfg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::objects_cfg >(arena);
}
template<> PROTOBUF_NOINLINE ::Relation* Arena::CreateMaybeMessage< ::Relation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Relation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
