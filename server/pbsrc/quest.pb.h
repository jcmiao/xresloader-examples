// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: quest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_quest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_quest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xresloader.pb.h"
#include "xrescode_extensions_v3.pb.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_quest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_quest_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_quest_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_quest_2eproto_metadata_getter(int index);
class TestBase;
struct TestBaseDefaultTypeInternal;
extern TestBaseDefaultTypeInternal _TestBase_default_instance_;
class quests_cfg;
struct quests_cfgDefaultTypeInternal;
extern quests_cfgDefaultTypeInternal _quests_cfg_default_instance_;
class quests_cfg_SubMsg;
struct quests_cfg_SubMsgDefaultTypeInternal;
extern quests_cfg_SubMsgDefaultTypeInternal _quests_cfg_SubMsg_default_instance_;
class quests_cfg_SubSubMsg;
struct quests_cfg_SubSubMsgDefaultTypeInternal;
extern quests_cfg_SubSubMsgDefaultTypeInternal _quests_cfg_SubSubMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TestBase* Arena::CreateMaybeMessage<::TestBase>(Arena*);
template<> ::quests_cfg* Arena::CreateMaybeMessage<::quests_cfg>(Arena*);
template<> ::quests_cfg_SubMsg* Arena::CreateMaybeMessage<::quests_cfg_SubMsg>(Arena*);
template<> ::quests_cfg_SubSubMsg* Arena::CreateMaybeMessage<::quests_cfg_SubSubMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum quests_cfg_ItemType3 : int {
  quests_cfg_ItemType3_TYPE_UNKNOWN = 0,
  quests_cfg_ItemType3_TYPE_G = 7,
  quests_cfg_ItemType3_TYPE_H = 8,
  quests_cfg_ItemType3_TYPE_I = 9,
  quests_cfg_ItemType3_quests_cfg_ItemType3_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  quests_cfg_ItemType3_quests_cfg_ItemType3_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool quests_cfg_ItemType3_IsValid(int value);
constexpr quests_cfg_ItemType3 quests_cfg_ItemType3_ItemType3_MIN = quests_cfg_ItemType3_TYPE_UNKNOWN;
constexpr quests_cfg_ItemType3 quests_cfg_ItemType3_ItemType3_MAX = quests_cfg_ItemType3_TYPE_I;
constexpr int quests_cfg_ItemType3_ItemType3_ARRAYSIZE = quests_cfg_ItemType3_ItemType3_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* quests_cfg_ItemType3_descriptor();
template<typename T>
inline const std::string& quests_cfg_ItemType3_Name(T enum_t_value) {
  static_assert(::std::is_same<T, quests_cfg_ItemType3>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function quests_cfg_ItemType3_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    quests_cfg_ItemType3_descriptor(), enum_t_value);
}
inline bool quests_cfg_ItemType3_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, quests_cfg_ItemType3* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<quests_cfg_ItemType3>(
    quests_cfg_ItemType3_descriptor(), name, value);
}
enum ItemType2 : int {
  TYPE_UNKNOWN = 0,
  TYPE_D = 4,
  TYPE_E = 5,
  TYPE_F = 6,
  ItemType2_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ItemType2_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ItemType2_IsValid(int value);
constexpr ItemType2 ItemType2_MIN = TYPE_UNKNOWN;
constexpr ItemType2 ItemType2_MAX = TYPE_F;
constexpr int ItemType2_ARRAYSIZE = ItemType2_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ItemType2_descriptor();
template<typename T>
inline const std::string& ItemType2_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ItemType2>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ItemType2_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ItemType2_descriptor(), enum_t_value);
}
inline bool ItemType2_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ItemType2* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ItemType2>(
    ItemType2_descriptor(), name, value);
}
// ===================================================================

class quests_cfg_SubMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quests_cfg.SubMsg) */ {
 public:
  inline quests_cfg_SubMsg() : quests_cfg_SubMsg(nullptr) {}
  virtual ~quests_cfg_SubMsg();
  explicit constexpr quests_cfg_SubMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  quests_cfg_SubMsg(const quests_cfg_SubMsg& from);
  quests_cfg_SubMsg(quests_cfg_SubMsg&& from) noexcept
    : quests_cfg_SubMsg() {
    *this = ::std::move(from);
  }

  inline quests_cfg_SubMsg& operator=(const quests_cfg_SubMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline quests_cfg_SubMsg& operator=(quests_cfg_SubMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const quests_cfg_SubMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const quests_cfg_SubMsg* internal_default_instance() {
    return reinterpret_cast<const quests_cfg_SubMsg*>(
               &_quests_cfg_SubMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(quests_cfg_SubMsg& a, quests_cfg_SubMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(quests_cfg_SubMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(quests_cfg_SubMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quests_cfg_SubMsg* New() const final {
    return CreateMaybeMessage<quests_cfg_SubMsg>(nullptr);
  }

  quests_cfg_SubMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quests_cfg_SubMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const quests_cfg_SubMsg& from);
  void MergeFrom(const quests_cfg_SubMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quests_cfg_SubMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quests_cfg.SubMsg";
  }
  protected:
  explicit quests_cfg_SubMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_quest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam3FieldNumber = 3,
    kParam1FieldNumber = 1,
    kParam2FieldNumber = 2,
  };
  // .quests_cfg.SubSubMsg Param3 = 3;
  bool has_param3() const;
  private:
  bool _internal_has_param3() const;
  public:
  void clear_param3();
  const ::quests_cfg_SubSubMsg& param3() const;
  ::quests_cfg_SubSubMsg* release_param3();
  ::quests_cfg_SubSubMsg* mutable_param3();
  void set_allocated_param3(::quests_cfg_SubSubMsg* param3);
  private:
  const ::quests_cfg_SubSubMsg& _internal_param3() const;
  ::quests_cfg_SubSubMsg* _internal_mutable_param3();
  public:
  void unsafe_arena_set_allocated_param3(
      ::quests_cfg_SubSubMsg* param3);
  ::quests_cfg_SubSubMsg* unsafe_arena_release_param3();

  // uint32 Param1 = 1;
  void clear_param1();
  ::PROTOBUF_NAMESPACE_ID::uint32 param1() const;
  void set_param1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param1() const;
  void _internal_set_param1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Param2 = 2;
  void clear_param2();
  ::PROTOBUF_NAMESPACE_ID::uint32 param2() const;
  void set_param2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_param2() const;
  void _internal_set_param2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:quests_cfg.SubMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::quests_cfg_SubSubMsg* param3_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 param2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quest_2eproto;
};
// -------------------------------------------------------------------

class quests_cfg_SubSubMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quests_cfg.SubSubMsg) */ {
 public:
  inline quests_cfg_SubSubMsg() : quests_cfg_SubSubMsg(nullptr) {}
  virtual ~quests_cfg_SubSubMsg();
  explicit constexpr quests_cfg_SubSubMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  quests_cfg_SubSubMsg(const quests_cfg_SubSubMsg& from);
  quests_cfg_SubSubMsg(quests_cfg_SubSubMsg&& from) noexcept
    : quests_cfg_SubSubMsg() {
    *this = ::std::move(from);
  }

  inline quests_cfg_SubSubMsg& operator=(const quests_cfg_SubSubMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline quests_cfg_SubSubMsg& operator=(quests_cfg_SubSubMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const quests_cfg_SubSubMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const quests_cfg_SubSubMsg* internal_default_instance() {
    return reinterpret_cast<const quests_cfg_SubSubMsg*>(
               &_quests_cfg_SubSubMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(quests_cfg_SubSubMsg& a, quests_cfg_SubSubMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(quests_cfg_SubSubMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(quests_cfg_SubSubMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quests_cfg_SubSubMsg* New() const final {
    return CreateMaybeMessage<quests_cfg_SubSubMsg>(nullptr);
  }

  quests_cfg_SubSubMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quests_cfg_SubSubMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const quests_cfg_SubSubMsg& from);
  void MergeFrom(const quests_cfg_SubSubMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quests_cfg_SubSubMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quests_cfg.SubSubMsg";
  }
  protected:
  explicit quests_cfg_SubSubMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_quest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kP2FieldNumber = 2,
    kP1FieldNumber = 1,
    kIt2FieldNumber = 3,
  };
  // uint64 p2 = 2;
  void clear_p2();
  ::PROTOBUF_NAMESPACE_ID::uint64 p2() const;
  void set_p2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_p2() const;
  void _internal_set_p2(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 p1 = 1;
  void clear_p1();
  ::PROTOBUF_NAMESPACE_ID::uint32 p1() const;
  void set_p1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p1() const;
  void _internal_set_p1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ItemType2 it2 = 3;
  void clear_it2();
  ::ItemType2 it2() const;
  void set_it2(::ItemType2 value);
  private:
  ::ItemType2 _internal_it2() const;
  void _internal_set_it2(::ItemType2 value);
  public:

  // @@protoc_insertion_point(class_scope:quests_cfg.SubSubMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 p2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p1_;
  int it2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quest_2eproto;
};
// -------------------------------------------------------------------

class quests_cfg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:quests_cfg) */ {
 public:
  inline quests_cfg() : quests_cfg(nullptr) {}
  virtual ~quests_cfg();
  explicit constexpr quests_cfg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  quests_cfg(const quests_cfg& from);
  quests_cfg(quests_cfg&& from) noexcept
    : quests_cfg() {
    *this = ::std::move(from);
  }

  inline quests_cfg& operator=(const quests_cfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline quests_cfg& operator=(quests_cfg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const quests_cfg& default_instance() {
    return *internal_default_instance();
  }
  static inline const quests_cfg* internal_default_instance() {
    return reinterpret_cast<const quests_cfg*>(
               &_quests_cfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(quests_cfg& a, quests_cfg& b) {
    a.Swap(&b);
  }
  inline void Swap(quests_cfg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(quests_cfg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline quests_cfg* New() const final {
    return CreateMaybeMessage<quests_cfg>(nullptr);
  }

  quests_cfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<quests_cfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const quests_cfg& from);
  void MergeFrom(const quests_cfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(quests_cfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "quests_cfg";
  }
  protected:
  explicit quests_cfg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_quest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef quests_cfg_SubMsg SubMsg;
  typedef quests_cfg_SubSubMsg SubSubMsg;

  typedef quests_cfg_ItemType3 ItemType3;
  static constexpr ItemType3 TYPE_UNKNOWN =
    quests_cfg_ItemType3_TYPE_UNKNOWN;
  static constexpr ItemType3 TYPE_G =
    quests_cfg_ItemType3_TYPE_G;
  static constexpr ItemType3 TYPE_H =
    quests_cfg_ItemType3_TYPE_H;
  static constexpr ItemType3 TYPE_I =
    quests_cfg_ItemType3_TYPE_I;
  static inline bool ItemType3_IsValid(int value) {
    return quests_cfg_ItemType3_IsValid(value);
  }
  static constexpr ItemType3 ItemType3_MIN =
    quests_cfg_ItemType3_ItemType3_MIN;
  static constexpr ItemType3 ItemType3_MAX =
    quests_cfg_ItemType3_ItemType3_MAX;
  static constexpr int ItemType3_ARRAYSIZE =
    quests_cfg_ItemType3_ItemType3_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ItemType3_descriptor() {
    return quests_cfg_ItemType3_descriptor();
  }
  template<typename T>
  static inline const std::string& ItemType3_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ItemType3>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ItemType3_Name.");
    return quests_cfg_ItemType3_Name(enum_t_value);
  }
  static inline bool ItemType3_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ItemType3* value) {
    return quests_cfg_ItemType3_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kDescFieldNumber = 4,
    kParamFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kIt2FieldNumber = 6,
    kIt3FieldNumber = 7,
    kIt1FieldNumber = 8,
  };
  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Desc = 4;
  void clear_desc();
  const std::string& desc() const;
  void set_desc(const std::string& value);
  void set_desc(std::string&& value);
  void set_desc(const char* value);
  void set_desc(const char* value, size_t size);
  std::string* mutable_desc();
  std::string* release_desc();
  void set_allocated_desc(std::string* desc);
  private:
  const std::string& _internal_desc() const;
  void _internal_set_desc(const std::string& value);
  std::string* _internal_mutable_desc();
  public:

  // .quests_cfg.SubMsg Param = 5;
  bool has_param() const;
  private:
  bool _internal_has_param() const;
  public:
  void clear_param();
  const ::quests_cfg_SubMsg& param() const;
  ::quests_cfg_SubMsg* release_param();
  ::quests_cfg_SubMsg* mutable_param();
  void set_allocated_param(::quests_cfg_SubMsg* param);
  private:
  const ::quests_cfg_SubMsg& _internal_param() const;
  ::quests_cfg_SubMsg* _internal_mutable_param();
  public:
  void unsafe_arena_set_allocated_param(
      ::quests_cfg_SubMsg* param);
  ::quests_cfg_SubMsg* unsafe_arena_release_param();

  // uint32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 Type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .ItemType2 it2 = 6;
  void clear_it2();
  ::ItemType2 it2() const;
  void set_it2(::ItemType2 value);
  private:
  ::ItemType2 _internal_it2() const;
  void _internal_set_it2(::ItemType2 value);
  public:

  // .quests_cfg.ItemType3 it3 = 7;
  void clear_it3();
  ::quests_cfg_ItemType3 it3() const;
  void set_it3(::quests_cfg_ItemType3 value);
  private:
  ::quests_cfg_ItemType3 _internal_it3() const;
  void _internal_set_it3(::quests_cfg_ItemType3 value);
  public:

  // .base.ItemType it1 = 8;
  void clear_it1();
  ::base::ItemType it1() const;
  void set_it1(::base::ItemType value);
  private:
  ::base::ItemType _internal_it1() const;
  void _internal_set_it1(::base::ItemType value);
  public:

  // @@protoc_insertion_point(class_scope:quests_cfg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr desc_;
  ::quests_cfg_SubMsg* param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  int it2_;
  int it3_;
  int it1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quest_2eproto;
};
// -------------------------------------------------------------------

class TestBase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestBase) */ {
 public:
  inline TestBase() : TestBase(nullptr) {}
  virtual ~TestBase();
  explicit constexpr TestBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestBase(const TestBase& from);
  TestBase(TestBase&& from) noexcept
    : TestBase() {
    *this = ::std::move(from);
  }

  inline TestBase& operator=(const TestBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestBase& operator=(TestBase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestBase* internal_default_instance() {
    return reinterpret_cast<const TestBase*>(
               &_TestBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestBase& a, TestBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TestBase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestBase* New() const final {
    return CreateMaybeMessage<TestBase>(nullptr);
  }

  TestBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestBase& from);
  void MergeFrom(const TestBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestBase";
  }
  protected:
  explicit TestBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_quest_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBbbbbFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // .base.Base bbbbb = 2;
  bool has_bbbbb() const;
  private:
  bool _internal_has_bbbbb() const;
  public:
  void clear_bbbbb();
  const ::base::Base& bbbbb() const;
  ::base::Base* release_bbbbb();
  ::base::Base* mutable_bbbbb();
  void set_allocated_bbbbb(::base::Base* bbbbb);
  private:
  const ::base::Base& _internal_bbbbb() const;
  ::base::Base* _internal_mutable_bbbbb();
  public:
  void unsafe_arena_set_allocated_bbbbb(
      ::base::Base* bbbbb);
  ::base::Base* unsafe_arena_release_bbbbb();

  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::base::Base* bbbbb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_quest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// quests_cfg_SubMsg

// uint32 Param1 = 1;
inline void quests_cfg_SubMsg::clear_param1() {
  param1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubMsg::_internal_param1() const {
  return param1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubMsg::param1() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubMsg.Param1)
  return _internal_param1();
}
inline void quests_cfg_SubMsg::_internal_set_param1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  param1_ = value;
}
inline void quests_cfg_SubMsg::set_param1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:quests_cfg.SubMsg.Param1)
}

// uint32 Param2 = 2;
inline void quests_cfg_SubMsg::clear_param2() {
  param2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubMsg::_internal_param2() const {
  return param2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubMsg::param2() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubMsg.Param2)
  return _internal_param2();
}
inline void quests_cfg_SubMsg::_internal_set_param2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  param2_ = value;
}
inline void quests_cfg_SubMsg::set_param2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:quests_cfg.SubMsg.Param2)
}

// .quests_cfg.SubSubMsg Param3 = 3;
inline bool quests_cfg_SubMsg::_internal_has_param3() const {
  return this != internal_default_instance() && param3_ != nullptr;
}
inline bool quests_cfg_SubMsg::has_param3() const {
  return _internal_has_param3();
}
inline void quests_cfg_SubMsg::clear_param3() {
  if (GetArena() == nullptr && param3_ != nullptr) {
    delete param3_;
  }
  param3_ = nullptr;
}
inline const ::quests_cfg_SubSubMsg& quests_cfg_SubMsg::_internal_param3() const {
  const ::quests_cfg_SubSubMsg* p = param3_;
  return p != nullptr ? *p : reinterpret_cast<const ::quests_cfg_SubSubMsg&>(
      ::_quests_cfg_SubSubMsg_default_instance_);
}
inline const ::quests_cfg_SubSubMsg& quests_cfg_SubMsg::param3() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubMsg.Param3)
  return _internal_param3();
}
inline void quests_cfg_SubMsg::unsafe_arena_set_allocated_param3(
    ::quests_cfg_SubSubMsg* param3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param3_);
  }
  param3_ = param3;
  if (param3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:quests_cfg.SubMsg.Param3)
}
inline ::quests_cfg_SubSubMsg* quests_cfg_SubMsg::release_param3() {
  
  ::quests_cfg_SubSubMsg* temp = param3_;
  param3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::quests_cfg_SubSubMsg* quests_cfg_SubMsg::unsafe_arena_release_param3() {
  // @@protoc_insertion_point(field_release:quests_cfg.SubMsg.Param3)
  
  ::quests_cfg_SubSubMsg* temp = param3_;
  param3_ = nullptr;
  return temp;
}
inline ::quests_cfg_SubSubMsg* quests_cfg_SubMsg::_internal_mutable_param3() {
  
  if (param3_ == nullptr) {
    auto* p = CreateMaybeMessage<::quests_cfg_SubSubMsg>(GetArena());
    param3_ = p;
  }
  return param3_;
}
inline ::quests_cfg_SubSubMsg* quests_cfg_SubMsg::mutable_param3() {
  // @@protoc_insertion_point(field_mutable:quests_cfg.SubMsg.Param3)
  return _internal_mutable_param3();
}
inline void quests_cfg_SubMsg::set_allocated_param3(::quests_cfg_SubSubMsg* param3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param3_;
  }
  if (param3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param3);
    if (message_arena != submessage_arena) {
      param3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param3, submessage_arena);
    }
    
  } else {
    
  }
  param3_ = param3;
  // @@protoc_insertion_point(field_set_allocated:quests_cfg.SubMsg.Param3)
}

// -------------------------------------------------------------------

// quests_cfg_SubSubMsg

// uint32 p1 = 1;
inline void quests_cfg_SubSubMsg::clear_p1() {
  p1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubSubMsg::_internal_p1() const {
  return p1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg_SubSubMsg::p1() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubSubMsg.p1)
  return _internal_p1();
}
inline void quests_cfg_SubSubMsg::_internal_set_p1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  p1_ = value;
}
inline void quests_cfg_SubSubMsg::set_p1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p1(value);
  // @@protoc_insertion_point(field_set:quests_cfg.SubSubMsg.p1)
}

// uint64 p2 = 2;
inline void quests_cfg_SubSubMsg::clear_p2() {
  p2_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 quests_cfg_SubSubMsg::_internal_p2() const {
  return p2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 quests_cfg_SubSubMsg::p2() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubSubMsg.p2)
  return _internal_p2();
}
inline void quests_cfg_SubSubMsg::_internal_set_p2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  p2_ = value;
}
inline void quests_cfg_SubSubMsg::set_p2(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_p2(value);
  // @@protoc_insertion_point(field_set:quests_cfg.SubSubMsg.p2)
}

// .ItemType2 it2 = 3;
inline void quests_cfg_SubSubMsg::clear_it2() {
  it2_ = 0;
}
inline ::ItemType2 quests_cfg_SubSubMsg::_internal_it2() const {
  return static_cast< ::ItemType2 >(it2_);
}
inline ::ItemType2 quests_cfg_SubSubMsg::it2() const {
  // @@protoc_insertion_point(field_get:quests_cfg.SubSubMsg.it2)
  return _internal_it2();
}
inline void quests_cfg_SubSubMsg::_internal_set_it2(::ItemType2 value) {
  
  it2_ = value;
}
inline void quests_cfg_SubSubMsg::set_it2(::ItemType2 value) {
  _internal_set_it2(value);
  // @@protoc_insertion_point(field_set:quests_cfg.SubSubMsg.it2)
}

// -------------------------------------------------------------------

// quests_cfg

// uint32 Id = 1;
inline void quests_cfg::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg::id() const {
  // @@protoc_insertion_point(field_get:quests_cfg.Id)
  return _internal_id();
}
inline void quests_cfg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void quests_cfg::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:quests_cfg.Id)
}

// uint32 Type = 2;
inline void quests_cfg::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 quests_cfg::type() const {
  // @@protoc_insertion_point(field_get:quests_cfg.Type)
  return _internal_type();
}
inline void quests_cfg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
}
inline void quests_cfg::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:quests_cfg.Type)
}

// string Name = 3;
inline void quests_cfg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& quests_cfg::name() const {
  // @@protoc_insertion_point(field_get:quests_cfg.Name)
  return _internal_name();
}
inline void quests_cfg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:quests_cfg.Name)
}
inline std::string* quests_cfg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:quests_cfg.Name)
  return _internal_mutable_name();
}
inline const std::string& quests_cfg::_internal_name() const {
  return name_.Get();
}
inline void quests_cfg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void quests_cfg::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:quests_cfg.Name)
}
inline void quests_cfg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:quests_cfg.Name)
}
inline void quests_cfg::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:quests_cfg.Name)
}
inline std::string* quests_cfg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* quests_cfg::release_name() {
  // @@protoc_insertion_point(field_release:quests_cfg.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void quests_cfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:quests_cfg.Name)
}

// string Desc = 4;
inline void quests_cfg::clear_desc() {
  desc_.ClearToEmpty();
}
inline const std::string& quests_cfg::desc() const {
  // @@protoc_insertion_point(field_get:quests_cfg.Desc)
  return _internal_desc();
}
inline void quests_cfg::set_desc(const std::string& value) {
  _internal_set_desc(value);
  // @@protoc_insertion_point(field_set:quests_cfg.Desc)
}
inline std::string* quests_cfg::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:quests_cfg.Desc)
  return _internal_mutable_desc();
}
inline const std::string& quests_cfg::_internal_desc() const {
  return desc_.Get();
}
inline void quests_cfg::_internal_set_desc(const std::string& value) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void quests_cfg::set_desc(std::string&& value) {
  
  desc_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:quests_cfg.Desc)
}
inline void quests_cfg::set_desc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:quests_cfg.Desc)
}
inline void quests_cfg::set_desc(const char* value,
    size_t size) {
  
  desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:quests_cfg.Desc)
}
inline std::string* quests_cfg::_internal_mutable_desc() {
  
  return desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* quests_cfg::release_desc() {
  // @@protoc_insertion_point(field_release:quests_cfg.Desc)
  return desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void quests_cfg::set_allocated_desc(std::string* desc) {
  if (desc != nullptr) {
    
  } else {
    
  }
  desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), desc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:quests_cfg.Desc)
}

// .quests_cfg.SubMsg Param = 5;
inline bool quests_cfg::_internal_has_param() const {
  return this != internal_default_instance() && param_ != nullptr;
}
inline bool quests_cfg::has_param() const {
  return _internal_has_param();
}
inline void quests_cfg::clear_param() {
  if (GetArena() == nullptr && param_ != nullptr) {
    delete param_;
  }
  param_ = nullptr;
}
inline const ::quests_cfg_SubMsg& quests_cfg::_internal_param() const {
  const ::quests_cfg_SubMsg* p = param_;
  return p != nullptr ? *p : reinterpret_cast<const ::quests_cfg_SubMsg&>(
      ::_quests_cfg_SubMsg_default_instance_);
}
inline const ::quests_cfg_SubMsg& quests_cfg::param() const {
  // @@protoc_insertion_point(field_get:quests_cfg.Param)
  return _internal_param();
}
inline void quests_cfg::unsafe_arena_set_allocated_param(
    ::quests_cfg_SubMsg* param) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(param_);
  }
  param_ = param;
  if (param) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:quests_cfg.Param)
}
inline ::quests_cfg_SubMsg* quests_cfg::release_param() {
  
  ::quests_cfg_SubMsg* temp = param_;
  param_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::quests_cfg_SubMsg* quests_cfg::unsafe_arena_release_param() {
  // @@protoc_insertion_point(field_release:quests_cfg.Param)
  
  ::quests_cfg_SubMsg* temp = param_;
  param_ = nullptr;
  return temp;
}
inline ::quests_cfg_SubMsg* quests_cfg::_internal_mutable_param() {
  
  if (param_ == nullptr) {
    auto* p = CreateMaybeMessage<::quests_cfg_SubMsg>(GetArena());
    param_ = p;
  }
  return param_;
}
inline ::quests_cfg_SubMsg* quests_cfg::mutable_param() {
  // @@protoc_insertion_point(field_mutable:quests_cfg.Param)
  return _internal_mutable_param();
}
inline void quests_cfg::set_allocated_param(::quests_cfg_SubMsg* param) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete param_;
  }
  if (param) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(param);
    if (message_arena != submessage_arena) {
      param = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, param, submessage_arena);
    }
    
  } else {
    
  }
  param_ = param;
  // @@protoc_insertion_point(field_set_allocated:quests_cfg.Param)
}

// .ItemType2 it2 = 6;
inline void quests_cfg::clear_it2() {
  it2_ = 0;
}
inline ::ItemType2 quests_cfg::_internal_it2() const {
  return static_cast< ::ItemType2 >(it2_);
}
inline ::ItemType2 quests_cfg::it2() const {
  // @@protoc_insertion_point(field_get:quests_cfg.it2)
  return _internal_it2();
}
inline void quests_cfg::_internal_set_it2(::ItemType2 value) {
  
  it2_ = value;
}
inline void quests_cfg::set_it2(::ItemType2 value) {
  _internal_set_it2(value);
  // @@protoc_insertion_point(field_set:quests_cfg.it2)
}

// .quests_cfg.ItemType3 it3 = 7;
inline void quests_cfg::clear_it3() {
  it3_ = 0;
}
inline ::quests_cfg_ItemType3 quests_cfg::_internal_it3() const {
  return static_cast< ::quests_cfg_ItemType3 >(it3_);
}
inline ::quests_cfg_ItemType3 quests_cfg::it3() const {
  // @@protoc_insertion_point(field_get:quests_cfg.it3)
  return _internal_it3();
}
inline void quests_cfg::_internal_set_it3(::quests_cfg_ItemType3 value) {
  
  it3_ = value;
}
inline void quests_cfg::set_it3(::quests_cfg_ItemType3 value) {
  _internal_set_it3(value);
  // @@protoc_insertion_point(field_set:quests_cfg.it3)
}

// .base.ItemType it1 = 8;
inline void quests_cfg::clear_it1() {
  it1_ = 0;
}
inline ::base::ItemType quests_cfg::_internal_it1() const {
  return static_cast< ::base::ItemType >(it1_);
}
inline ::base::ItemType quests_cfg::it1() const {
  // @@protoc_insertion_point(field_get:quests_cfg.it1)
  return _internal_it1();
}
inline void quests_cfg::_internal_set_it1(::base::ItemType value) {
  
  it1_ = value;
}
inline void quests_cfg::set_it1(::base::ItemType value) {
  _internal_set_it1(value);
  // @@protoc_insertion_point(field_set:quests_cfg.it1)
}

// -------------------------------------------------------------------

// TestBase

// uint32 value = 1;
inline void TestBase::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestBase::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestBase::value() const {
  // @@protoc_insertion_point(field_get:TestBase.value)
  return _internal_value();
}
inline void TestBase::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void TestBase::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TestBase.value)
}

// .base.Base bbbbb = 2;
inline bool TestBase::_internal_has_bbbbb() const {
  return this != internal_default_instance() && bbbbb_ != nullptr;
}
inline bool TestBase::has_bbbbb() const {
  return _internal_has_bbbbb();
}
inline const ::base::Base& TestBase::_internal_bbbbb() const {
  const ::base::Base* p = bbbbb_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::Base&>(
      ::base::_Base_default_instance_);
}
inline const ::base::Base& TestBase::bbbbb() const {
  // @@protoc_insertion_point(field_get:TestBase.bbbbb)
  return _internal_bbbbb();
}
inline void TestBase::unsafe_arena_set_allocated_bbbbb(
    ::base::Base* bbbbb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbbbb_);
  }
  bbbbb_ = bbbbb;
  if (bbbbb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestBase.bbbbb)
}
inline ::base::Base* TestBase::release_bbbbb() {
  
  ::base::Base* temp = bbbbb_;
  bbbbb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::base::Base* TestBase::unsafe_arena_release_bbbbb() {
  // @@protoc_insertion_point(field_release:TestBase.bbbbb)
  
  ::base::Base* temp = bbbbb_;
  bbbbb_ = nullptr;
  return temp;
}
inline ::base::Base* TestBase::_internal_mutable_bbbbb() {
  
  if (bbbbb_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::Base>(GetArena());
    bbbbb_ = p;
  }
  return bbbbb_;
}
inline ::base::Base* TestBase::mutable_bbbbb() {
  // @@protoc_insertion_point(field_mutable:TestBase.bbbbb)
  return _internal_mutable_bbbbb();
}
inline void TestBase::set_allocated_bbbbb(::base::Base* bbbbb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbbbb_);
  }
  if (bbbbb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bbbbb)->GetArena();
    if (message_arena != submessage_arena) {
      bbbbb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bbbbb, submessage_arena);
    }
    
  } else {
    
  }
  bbbbb_ = bbbbb;
  // @@protoc_insertion_point(field_set_allocated:TestBase.bbbbb)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::quests_cfg_ItemType3> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quests_cfg_ItemType3>() {
  return ::quests_cfg_ItemType3_descriptor();
}
template <> struct is_proto_enum< ::ItemType2> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ItemType2>() {
  return ::ItemType2_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_quest_2eproto
